Resources:
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: ${self:custom.oaiComment}

  HostingBucketCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - ${self:custom.domain}
        # CacheBehaviors:
        #   - CacheBehavior
        # Comment: String
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"
        Origins:
          - Id: ${self:custom.originId}
            DomainName: ${self:custom.hostingBucketDomainName}
            # CustomOriginConfig:
            #   HTTPPort: 80
            #   HTTPSPort: 443
            #   OriginKeepaliveTimeout: 5
            #   OriginProtocolPolicy: "http-only"
            #   OriginReadTimeout: 30
              # OriginSSLProtocols:
              #   - String
            # OriginCustomHeaders:
            #   - OriginCustomHeader
            # OriginPath: String
            S3OriginConfig:
              # OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", !Ref OriginAccessIdentity]
              OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", Ref: OriginAccessIdentity]]
        DefaultCacheBehavior:
          AllowedMethods:
            - "GET"
            - "HEAD"
          CachedMethods:
            - "GET"
            - "HEAD"
          Compress: true
          DefaultTTL: 86400
          # FieldLevelEncryptionId: String
          ForwardedValues:
            Cookies:
              Forward: none
              # WhitelistedNames:
              #   - String
            # Headers:
            #   - String
            QueryString: false
            # QueryStringCacheKeys:
            #   - String
          # LambdaFunctionAssociations:
          #   - LambdaFunctionAssociation
          MinTTL: 0
          MaxTTL: 31536000
          SmoothStreaming: false
          TargetOriginId: ${self:custom.originId}
          # TrustedSigners:
          #   - String
          ViewerProtocolPolicy: "redirect-to-https"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: "http2"
        IPV6Enabled: true
        # Logging:
        #   Logging
        # OriginGroups:
        #   OriginGroups
        PriceClass: "PriceClass_All"
        # Restrictions:
        #   Restrictions
        ViewerCertificate:
          AcmCertificateArn: ${ssm:groffcole.com-certificate-arn~true}
          # CloudFrontDefaultCertificate: false
          # IamCertificateId: String
          MinimumProtocolVersion: "TLSv1.1_2016"
          SslSupportMethod: "sni-only"
        # WebACLId: String

  HostingBucketCloudFrontDistributionIdSecret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      # Description: String
      # GenerateSecretString: 
      #   GenerateSecretString
      # KmsKeyId: String
      Name: ${self:custom.cdnIdSecretName}
      SecretString: 
        Ref: HostingBucketCloudFrontDistribution

  HostingBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: ${self:custom.hostingBucketName}
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              # AWS: arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E1WQOD7HKQFPCW"
              # AWS: !Join ["", ["arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ", Ref: HostingBucketCloudFrontDistribution]]
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
            Action:
              - "s3:GetObject"
            Resource: !Join ["", ["arn:aws:s3:::", "${self:custom.hostingBucketName}", "/*"]]
